/*
 * DalvikLoader.cpp
 *
 *  Created on: 2016年5月15日
 *      Author: Administrator
 */
#include "Common.h"
#include "DalvikHeader.h"

#define LOGI(...)  __android_log_print(ANDROID_LOG_INFO, "CydiaSubstrate", __VA_ARGS__)

#define PRIVTAG 0x882002EC
#define LW_SHAPE_THIN 0
#define LW_SHAPE_FAT 1
#define LW_SHAPE_MASK 0x1
#define LW_HASH_STATE_MASK 0x3
#define LW_HASH_STATE_SHIFT 1
#define LW_SHAPE(x) ((x) & LW_SHAPE_MASK)
#define LW_MONITOR(x) ((Monitor*)((x) & ~((LW_HASH_STATE_MASK << LW_HASH_STATE_SHIFT) | LW_SHAPE_MASK)))
#define DALVIK_JNI_RETURN_SHIFT 28
#define DALVIK_JNI_NO_ARG_INFO  0x80000000

enum DalvikJniReturnType
{
	DALVIK_JNI_RETURN_VOID = 0,     /* must be zero */
	DALVIK_JNI_RETURN_FLOAT = 1,
	DALVIK_JNI_RETURN_DOUBLE = 2,
	DALVIK_JNI_RETURN_S8 = 3,
	DALVIK_JNI_RETURN_S4 = 4,
	DALVIK_JNI_RETURN_S2 = 5,
	DALVIK_JNI_RETURN_U2 = 6,
	DALVIK_JNI_RETURN_S1 = 7
};


MSConfig(MSFilterExecutable, "/system/bin/app_process");

struct invoke_data
{
	unsigned char* baseAddr;
	Object* obj;
	ArrayObject *argList;
};

MSImageRef MSGetImageByName(const char *file);
void* MSFindSymbol(MSImageRef image, const char *name);
void MSHookFunction(void *symbol, void *replace, void **result);
void MSJavaHookClassLoad(JNIEnv *jni, const char *name, void (*callback)(JNIEnv *, jclass, void *), void *data);
void MSJavaHookMethod(JNIEnv *jni, jclass _class, jmethodID methodID, void *function, void **result);
void MSJavaBlessClassLoader(JNIEnv *jni, jobject loader);
Object* MSDecodeIndirectReference(JNIEnv* env, jobject jobj);
void MSJavaHookBridge(Method *method, DalvikBridgeFunc func, Method** backup);
void* JNICALL MSCloseFunction(void* callback,void* mapdata);


extern "C" int dvmInstanceofNonTrivial(const ClassObject* instance, const ClassObject* clazz);
extern "C" ArrayObject * dvmAllocArrayByClass(ClassObject *arrayClass, size_t length, int allocFlags);
extern "C" void dvmReleaseTrackedAlloc(Object* obj, Thread* self);


void invokeBridge(const u4* args, JValue* pResult, const Method* method, struct Thread* self);
void zygoteInitLoad(JNIEnv *jni, jclass _class, void *data);
void zygoteMain(JNIEnv *env, jobject thiz, jobject host, jint port);
int (*oldZygoteMain)(JNIEnv *env, jobject jobj, ...);
void connectJavaHook(JNIEnv *env);
void connectJavaHookInner(JNIEnv *env);
char* zygoteClsName;//"com.android.internal.os.ZygoteInit"
bool g_hooked = false;
DvmDex* pMSdvmDex = 0;

void InitLib(void);
typedef void (*INITFUNC)(void);
__attribute__ ((section (".init_array")))
INITFUNC init_func=&InitLib;//放入单个函数

MSImageRef reflibdvm;
PrimitiveType voidtype;

//all version
int startReg(JNIEnv* env);
int (*oldstartReg)(JNIEnv* env);
//2.x 3.x
void start1(AndroidRuntime* thiz, const char* classname, const bool startSystemServer);
void (*oldstart1)(AndroidRuntime* thiz, const char* classname, const bool startSystemServer);
//4.x
void start2(AndroidRuntime* thiz, const char* classname, const char* options);
void (*oldstart2)(AndroidRuntime* thiz, const char* classname, const char* options);
//2.x 3.x 4.x
int startVm(AndroidRuntime* thiz, JavaVM** pJavaVM, JNIEnv** pEnv);
int (*oldstartVm)(AndroidRuntime* thiz, JavaVM** pJavaVM, JNIEnv** pEnv);

DexClassLookup* (*dexCreateClassLookup)(DexFile* pDexFile)=0;
const DexClassDef* (*dexFindClass)(const DexFile* pDexFile, const char* descriptor)=0;
PrimitiveType (*dexGetPrimitiveTypeFromDescriptorChar)(char descriptorChar)=0;
size_t (*dexProtoGetParameterCount)(const DexProto* pProto)=0;
int (*dexSwapAndVerify)(u1* addr, int len)=0;
void (*dvmCallMethod)(Thread* self, const Method* method, Object* obj, JValue* pResult, ...)=0;
bool (*dvmCheckException)(Thread* self)=0;
ClassObject* (*dvmDefineClass)(DvmDex* pDvmDex, const char* descriptor, Object* classLoader)=0;
int (*dvmDexFileOpenPartial)(const void* addr, int len, DvmDex** ppDvmDex)=0;
char* (*dvmDotToSlash)(const char* str)=0;
ClassObject* (*dvmFindArrayClass)(const char* descriptor, Object* loader)=0;
ClassObject* (*dvmFindPrimitiveClass)(char type)=0;
ClassObject* (*dvmGetBoxedReturnType)(const Method* meth)=0;
Object* (*dvmGetException)(Thread* self)=0;
s8 (*dvmGetFieldLong)(const Object* obj, int offset)=0;
JNIEnvExt* (*dvmGetJNIEnvForThread)()=0;
Object* (*dvmGetSystemClassLoader)()=0;
const Method* (*dvmGetVirtualizedMethod)(const ClassObject* clazz, const Method* meth)=0;
Object* (*dvmInvokeMethod)(Object* obj, const Method* method, ArrayObject* argList,
		ArrayObject* params, ClassObject* returnType, bool noAccessCheck);
bool (*dvmIsConstructorMethod)(const Method* method)=0;
bool (*dvmIsPrimitiveClass)(const ClassObject* clazz)=0;
bool (*dvmIsPrivateMethod)(const Method* method)=0;
bool (*dvmIsStaticMethod)(const Method* method)=0;
void (*dvmSetException)(Thread* self, Object* exception)=0;
void (*dvmWriteBarrierArray)(const ArrayObject *obj, size_t start, size_t end)=0;
DataObject* (*dvmBoxPrimitive)(JValue value, ClassObject* returnType)=0;
bool (*dvmUnboxPrimitive)(Object* value, ClassObject* returnType, JValue* pResult)=0;
void (*dvmThrowClassCastException)(ClassObject* actual, ClassObject* desired)=0;
void (*dvmThrowExceptionWithClassMessage)(const char* exceptionDescriptor, const char* messageDescriptor)=0;

void l_dvmThrowClassCastException(ClassObject* actual, ClassObject* desired);


int dexdatalen = 3220;//dex文件用于实现_MS类，承接substrate-api.jar中的MS类实现
unsigned char dexdata[]=
{
		0x64, 0x65, 0x78, 0x0A, 0x30, 0x33, 0x35, 0x00, 0xE7, 0x04, 0x58, 0x7C, 0x71, 0x2E, 0x61, 0x29,
		0x0A, 0x26, 0x23, 0xA4, 0x5F, 0x3D, 0x52, 0x63, 0xCD, 0x94, 0xB2, 0x76, 0x75, 0x87, 0xB7, 0x7D,
		0x94, 0x0C, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x78, 0x56, 0x34, 0x12, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xD0, 0x0B, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
		0x16, 0x00, 0x00, 0x00, 0x88, 0x01, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00,
		0x05, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x98, 0x02, 0x00, 0x00,
		0x05, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0xD4, 0x08, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00,
		0x36, 0x06, 0x00, 0x00, 0x39, 0x06, 0x00, 0x00, 0x3C, 0x06, 0x00, 0x00, 0x42, 0x06, 0x00, 0x00,
		0x47, 0x06, 0x00, 0x00, 0x4F, 0x06, 0x00, 0x00, 0x53, 0x06, 0x00, 0x00, 0x57, 0x06, 0x00, 0x00,
		0x5D, 0x06, 0x00, 0x00, 0x6C, 0x06, 0x00, 0x00, 0x6F, 0x06, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,
		0x76, 0x06, 0x00, 0x00, 0x7B, 0x06, 0x00, 0x00, 0xA8, 0x06, 0x00, 0x00, 0xD2, 0x06, 0x00, 0x00,
		0xF9, 0x06, 0x00, 0x00, 0x23, 0x07, 0x00, 0x00, 0x3F, 0x07, 0x00, 0x00, 0x63, 0x07, 0x00, 0x00,
		0x83, 0x07, 0x00, 0x00, 0xA6, 0x07, 0x00, 0x00, 0xC5, 0x07, 0x00, 0x00, 0xE1, 0x07, 0x00, 0x00,
		0x02, 0x08, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x27, 0x08, 0x00, 0x00, 0x40, 0x08, 0x00, 0x00,
		0x54, 0x08, 0x00, 0x00, 0x68, 0x08, 0x00, 0x00, 0x7F, 0x08, 0x00, 0x00, 0x9B, 0x08, 0x00, 0x00,
		0xB3, 0x08, 0x00, 0x00, 0xCC, 0x08, 0x00, 0x00, 0x15, 0x09, 0x00, 0x00, 0x21, 0x09, 0x00, 0x00,
		0x30, 0x09, 0x00, 0x00, 0x4B, 0x09, 0x00, 0x00, 0x54, 0x09, 0x00, 0x00, 0x57, 0x09, 0x00, 0x00,
		0x5B, 0x09, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0x66, 0x09, 0x00, 0x00, 0x6D, 0x09, 0x00, 0x00,
		0x70, 0x09, 0x00, 0x00, 0x84, 0x09, 0x00, 0x00, 0x99, 0x09, 0x00, 0x00, 0xA3, 0x09, 0x00, 0x00,
		0xB0, 0x09, 0x00, 0x00, 0xB7, 0x09, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00, 0xC9, 0x09, 0x00, 0x00,
		0xD8, 0x09, 0x00, 0x00, 0xE4, 0x09, 0x00, 0x00, 0xEC, 0x09, 0x00, 0x00, 0xF5, 0x09, 0x00, 0x00,
		0xFD, 0x09, 0x00, 0x00, 0x06, 0x0A, 0x00, 0x00, 0x10, 0x0A, 0x00, 0x00, 0x16, 0x0A, 0x00, 0x00,
		0x1E, 0x0A, 0x00, 0x00, 0x34, 0x0A, 0x00, 0x00, 0x3A, 0x0A, 0x00, 0x00, 0x42, 0x0A, 0x00, 0x00,
		0x48, 0x0A, 0x00, 0x00, 0x4F, 0x0A, 0x00, 0x00, 0x54, 0x0A, 0x00, 0x00, 0x5F, 0x0A, 0x00, 0x00,
		0x65, 0x0A, 0x00, 0x00, 0x6B, 0x0A, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
		0x0E, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
		0x12, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
		0x16, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00,
		0x1B, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,
		0x20, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00,
		0x0B, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0xE0, 0x05, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,
		0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,
		0xE8, 0x05, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0xF0, 0x05, 0x00, 0x00,
		0x0C, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0xF8, 0x05, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
		0x0E, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x08, 0x06, 0x00, 0x00,
		0x2A, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x10, 0x06, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
		0x13, 0x00, 0x00, 0x00, 0x1C, 0x06, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
		0x24, 0x06, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x00,
		0x01, 0x00, 0x12, 0x00, 0x39, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0F, 0x00, 0x40, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x04, 0x00, 0x14, 0x00, 0x42, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x0C, 0x00, 0x44, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0A, 0x00, 0x04, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x0B, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x01, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x02, 0x00, 0x07, 0x00, 0x31, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x05, 0x00, 0x36, 0x00, 0x00, 0x00, 0x04, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x05, 0x00, 0x35, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00,
		0x05, 0x00, 0x09, 0x00, 0x33, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x34, 0x00, 0x00, 0x00,
		0x05, 0x00, 0x02, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x0A, 0x00, 0x04, 0x00, 0x00, 0x00,
		0x0E, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x12, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00,
		0x12, 0x00, 0x03, 0x00, 0x32, 0x00, 0x00, 0x00, 0x12, 0x00, 0x04, 0x00, 0x41, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x24, 0x00, 0x00, 0x00, 0x58, 0x05, 0x00, 0x00, 0x7A, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x2E, 0x00, 0x00, 0x00, 0x78, 0x05, 0x00, 0x00, 0x96, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x2E, 0x00, 0x00, 0x00, 0x88, 0x05, 0x00, 0x00, 0x9E, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x2E, 0x00, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00, 0xA6, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x2E, 0x00, 0x00, 0x00, 0xC8, 0x05, 0x00, 0x00, 0xBA, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0xF7, 0x0A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x0B, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00, 0x1D, 0x0B, 0x00, 0x00, 0x23, 0x0B, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
		0x1D, 0x0B, 0x00, 0x00, 0x2D, 0x0B, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x37, 0x0B, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00, 0x1D, 0x0B, 0x00, 0x00, 0x3F, 0x0B, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x48, 0x0B, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x54, 0x0B, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x5E, 0x0B, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6A, 0x0B, 0x00, 0x00, 0x0C, 0x00, 0x03, 0x00,
		0x04, 0x00, 0x00, 0x00, 0x72, 0x0A, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x07, 0x90, 0x07, 0xA1,
		0x07, 0xB2, 0x07, 0x03, 0x07, 0x14, 0x07, 0x25, 0x22, 0x06, 0x12, 0x00, 0x07, 0x68, 0x07, 0x86,
		0x07, 0x87, 0x70, 0x10, 0x0E, 0x00, 0x07, 0x00, 0x70, 0x40, 0x01, 0x00, 0x43, 0x65, 0x07, 0x03,
		0x54, 0x33, 0x00, 0x00, 0x07, 0x24, 0x07, 0x05, 0x6E, 0x30, 0x10, 0x00, 0x43, 0x05, 0x0C, 0x03,
		0x0E, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x8D, 0x0A, 0x00, 0x00,
		0x13, 0x00, 0x00, 0x00, 0x07, 0x70, 0x07, 0x81, 0x07, 0x92, 0x07, 0xA3, 0x07, 0x04, 0x07, 0x15,
		0x07, 0x26, 0x70, 0x30, 0x0C, 0x00, 0x54, 0x06, 0x07, 0x04, 0x07, 0x15, 0x5B, 0x45, 0x01, 0x00,
		0x07, 0x04, 0x07, 0x35, 0x5B, 0x45, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x02, 0x00,
		0x04, 0x00, 0x00, 0x00, 0xB1, 0x0A, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x07, 0x90, 0x07, 0xA1,
		0x07, 0x03, 0x54, 0x33, 0x00, 0x00, 0x07, 0x14, 0x6E, 0x20, 0x0F, 0x00, 0x43, 0x00, 0x0C, 0x03,
		0x1F, 0x03, 0x0D, 0x00, 0x07, 0x32, 0x07, 0x23, 0x39, 0x03, 0x1B, 0x00, 0x22, 0x03, 0x01, 0x00,
		0x07, 0x38, 0x07, 0x83, 0x07, 0x84, 0x07, 0x05, 0x54, 0x55, 0x01, 0x00, 0x07, 0x16, 0x07, 0x07,
		0x54, 0x77, 0x00, 0x00, 0x70, 0x40, 0x01, 0x00, 0x54, 0x76, 0x07, 0x32, 0x07, 0x03, 0x54, 0x33,
		0x00, 0x00, 0x07, 0x14, 0x07, 0x25, 0x6E, 0x30, 0x10, 0x00, 0x43, 0x05, 0x0C, 0x03, 0x07, 0x23,
		0x07, 0x30, 0x11, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCF, 0x0A, 0x00, 0x00,
		0x06, 0x00, 0x00, 0x00, 0x07, 0x20, 0x07, 0x01, 0x54, 0x11, 0x00, 0x00, 0x07, 0x10, 0x11, 0x00,
		0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0xDE, 0x0A, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
		0x07, 0x20, 0x07, 0x01, 0x70, 0x10, 0x0D, 0x00, 0x01, 0x00, 0x0E, 0x00, 0x03, 0x00, 0x01, 0x00,
		0x01, 0x00, 0x00, 0x00, 0xE9, 0x0A, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x20, 0x07, 0x01,
		0x70, 0x10, 0x0D, 0x00, 0x01, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0xC8, 0x03, 0x00, 0x00, 0xD0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00,
		0xF0, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x00, 0x00, 0xFC, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00,
		0x07, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x14, 0x04, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x0E, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x0E, 0x00,
		0x02, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x15, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x11, 0x00, 0x03, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
		0x0F, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x0D, 0x00, 0x03, 0x00, 0x00, 0x00,
		0x0F, 0x00, 0x0D, 0x00, 0x12, 0x00, 0x01, 0x28, 0x00, 0x01, 0x3C, 0x00, 0x04, 0x3C, 0x2A, 0x3E,
		0x3B, 0x00, 0x03, 0x3C, 0x54, 0x3A, 0x00, 0x06, 0x3C, 0x69, 0x6E, 0x69, 0x74, 0x3E, 0x00, 0x02,
		0x3E, 0x28, 0x00, 0x02, 0x3E, 0x3B, 0x00, 0x04, 0x3E, 0x3B, 0x29, 0x56, 0x00, 0x0D, 0x43, 0x6C,
		0x61, 0x73, 0x73, 0x4C, 0x6F, 0x61, 0x64, 0x48, 0x6F, 0x6F, 0x6B, 0x00, 0x01, 0x4A, 0x00, 0x01,
		0x4C, 0x00, 0x02, 0x4C, 0x4C, 0x00, 0x03, 0x4C, 0x4C, 0x4C, 0x00, 0x2B, 0x4C, 0x63, 0x6F, 0x6D,
		0x2F, 0x73, 0x61, 0x75, 0x72, 0x69, 0x6B, 0x2F, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74,
		0x65, 0x2F, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6C, 0x61, 0x73, 0x73,
		0x4C, 0x6F, 0x61, 0x64, 0x65, 0x72, 0x3B, 0x00, 0x28, 0x4C, 0x63, 0x6F, 0x6D, 0x2F, 0x73, 0x61,
		0x75, 0x72, 0x69, 0x6B, 0x2F, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x2F, 0x5F,
		0x4D, 0x53, 0x24, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x4C, 0x6F, 0x61, 0x64, 0x48, 0x6F, 0x6F, 0x6B,
		0x3B, 0x00, 0x25, 0x4C, 0x63, 0x6F, 0x6D, 0x2F, 0x73, 0x61, 0x75, 0x72, 0x69, 0x6B, 0x2F, 0x73,
		0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x2F, 0x5F, 0x4D, 0x53, 0x24, 0x4D, 0x65, 0x74,
		0x68, 0x6F, 0x64, 0x48, 0x6F, 0x6F, 0x6B, 0x3B, 0x00, 0x28, 0x4C, 0x63, 0x6F, 0x6D, 0x2F, 0x73,
		0x61, 0x75, 0x72, 0x69, 0x6B, 0x2F, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x2F,
		0x5F, 0x4D, 0x53, 0x24, 0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x65,
		0x72, 0x3B, 0x00, 0x1A, 0x4C, 0x63, 0x6F, 0x6D, 0x2F, 0x73, 0x61, 0x75, 0x72, 0x69, 0x6B, 0x2F,
		0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x2F, 0x5F, 0x4D, 0x53, 0x3B, 0x00, 0x22,
		0x4C, 0x64, 0x61, 0x6C, 0x76, 0x69, 0x6B, 0x2F, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x61, 0x74, 0x69,
		0x6F, 0x6E, 0x2F, 0x45, 0x6E, 0x63, 0x6C, 0x6F, 0x73, 0x69, 0x6E, 0x67, 0x43, 0x6C, 0x61, 0x73,
		0x73, 0x3B, 0x00, 0x1E, 0x4C, 0x64, 0x61, 0x6C, 0x76, 0x69, 0x6B, 0x2F, 0x61, 0x6E, 0x6E, 0x6F,
		0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x49, 0x6E, 0x6E, 0x65, 0x72, 0x43, 0x6C, 0x61, 0x73,
		0x73, 0x3B, 0x00, 0x21, 0x4C, 0x64, 0x61, 0x6C, 0x76, 0x69, 0x6B, 0x2F, 0x61, 0x6E, 0x6E, 0x6F,
		0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x4D, 0x65, 0x6D, 0x62, 0x65, 0x72, 0x43, 0x6C, 0x61,
		0x73, 0x73, 0x65, 0x73, 0x3B, 0x00, 0x1D, 0x4C, 0x64, 0x61, 0x6C, 0x76, 0x69, 0x6B, 0x2F, 0x61,
		0x6E, 0x6E, 0x6F, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x53, 0x69, 0x67, 0x6E, 0x61, 0x74,
		0x75, 0x72, 0x65, 0x3B, 0x00, 0x1A, 0x4C, 0x64, 0x61, 0x6C, 0x76, 0x69, 0x6B, 0x2F, 0x61, 0x6E,
		0x6E, 0x6F, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x54, 0x68, 0x72, 0x6F, 0x77, 0x73, 0x3B,
		0x00, 0x1F, 0x4C, 0x64, 0x61, 0x6C, 0x76, 0x69, 0x6B, 0x2F, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6D,
		0x2F, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x4C, 0x6F, 0x61, 0x64, 0x65, 0x72,
		0x3B, 0x00, 0x10, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x43, 0x6C,
		0x61, 0x73, 0x73, 0x00, 0x11, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F,
		0x43, 0x6C, 0x61, 0x73, 0x73, 0x3B, 0x00, 0x17, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61,
		0x6E, 0x67, 0x2F, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x4C, 0x6F, 0x61, 0x64, 0x65, 0x72, 0x3B, 0x00,
		0x12, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x4F, 0x62, 0x6A, 0x65,
		0x63, 0x74, 0x3B, 0x00, 0x12, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F,
		0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3B, 0x00, 0x15, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C,
		0x61, 0x6E, 0x67, 0x2F, 0x54, 0x68, 0x72, 0x6F, 0x77, 0x61, 0x62, 0x6C, 0x65, 0x3B, 0x00, 0x1A,
		0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x72, 0x65, 0x66, 0x6C, 0x65,
		0x63, 0x74, 0x2F, 0x4D, 0x65, 0x6D, 0x62, 0x65, 0x72, 0x3B, 0x00, 0x16, 0x4C, 0x6A, 0x61, 0x76,
		0x61, 0x2F, 0x75, 0x74, 0x69, 0x6C, 0x2F, 0x57, 0x65, 0x61, 0x6B, 0x48, 0x61, 0x73, 0x68, 0x4D,
		0x61, 0x70, 0x00, 0x17, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x75, 0x74, 0x69, 0x6C, 0x2F, 0x57,
		0x65, 0x61, 0x6B, 0x48, 0x61, 0x73, 0x68, 0x4D, 0x61, 0x70, 0x3B, 0x00, 0x47, 0x4C, 0x6A, 0x61,
		0x76, 0x61, 0x2F, 0x75, 0x74, 0x69, 0x6C, 0x2F, 0x57, 0x65, 0x61, 0x6B, 0x48, 0x61, 0x73, 0x68,
		0x4D, 0x61, 0x70, 0x3C, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x43,
		0x6C, 0x61, 0x73, 0x73, 0x4C, 0x6F, 0x61, 0x64, 0x65, 0x72, 0x3B, 0x4C, 0x6A, 0x61, 0x76, 0x61,
		0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x4C, 0x6F, 0x61, 0x64, 0x65,
		0x72, 0x3B, 0x3E, 0x3B, 0x00, 0x0A, 0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x48, 0x6F, 0x6F, 0x6B,
		0x00, 0x0D, 0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x00,
		0x19, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x4C,
		0x6F, 0x61, 0x64, 0x65, 0x72, 0x2E, 0x6A, 0x61, 0x76, 0x61, 0x00, 0x07, 0x54, 0x54, 0x3B, 0x29,
		0x54, 0x54, 0x3B, 0x00, 0x01, 0x56, 0x00, 0x02, 0x56, 0x4C, 0x00, 0x03, 0x56, 0x4C, 0x4C, 0x00,
		0x04, 0x56, 0x4C, 0x4C, 0x4C, 0x00, 0x05, 0x56, 0x4C, 0x4C, 0x4C, 0x4C, 0x00, 0x01, 0x5B, 0x00,
		0x12, 0x5B, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x43, 0x6C, 0x61,
		0x73, 0x73, 0x3B, 0x00, 0x13, 0x5B, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67,
		0x2F, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x3B, 0x00, 0x08, 0x5F, 0x4D, 0x53, 0x2E, 0x6A, 0x61,
		0x76, 0x61, 0x00, 0x0B, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6C, 0x61, 0x67, 0x73, 0x00,
		0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x00, 0x0B, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x4C, 0x6F, 0x61,
		0x64, 0x65, 0x64, 0x00, 0x03, 0x67, 0x65, 0x74, 0x00, 0x0D, 0x68, 0x6F, 0x6F, 0x6B, 0x43, 0x6C,
		0x61, 0x73, 0x73, 0x4C, 0x6F, 0x61, 0x64, 0x00, 0x0A, 0x68, 0x6F, 0x6F, 0x6B, 0x4D, 0x65, 0x74,
		0x68, 0x6F, 0x64, 0x00, 0x06, 0x69, 0x6E, 0x76, 0x6F, 0x6B, 0x65, 0x00, 0x07, 0x69, 0x6E, 0x76,
		0x6F, 0x6B, 0x65, 0x64, 0x00, 0x06, 0x6C, 0x6F, 0x61, 0x64, 0x65, 0x72, 0x00, 0x07, 0x6C, 0x6F,
		0x61, 0x64, 0x65, 0x72, 0x73, 0x00, 0x08, 0x6C, 0x6F, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5F, 0x00,
		0x04, 0x6C, 0x6F, 0x63, 0x6B, 0x00, 0x06, 0x6D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x00, 0x14, 0x6D,
		0x6F, 0x76, 0x65, 0x55, 0x6E, 0x64, 0x65, 0x72, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x4C, 0x6F, 0x61,
		0x64, 0x65, 0x72, 0x00, 0x04, 0x6E, 0x61, 0x6D, 0x65, 0x00, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6E,
		0x74, 0x00, 0x04, 0x70, 0x61, 0x74, 0x68, 0x00, 0x05, 0x70, 0x61, 0x74, 0x68, 0x5F, 0x00, 0x03,
		0x70, 0x75, 0x74, 0x00, 0x09, 0x73, 0x69, 0x67, 0x6E, 0x61, 0x74, 0x75, 0x72, 0x65, 0x00, 0x04,
		0x74, 0x68, 0x69, 0x73, 0x00, 0x04, 0x74, 0x79, 0x70, 0x65, 0x00, 0x05, 0x76, 0x61, 0x6C, 0x75,
		0x65, 0x00, 0x23, 0x02, 0x00, 0x00, 0x07, 0x0E, 0x01, 0x01, 0x03, 0x00, 0x44, 0x02, 0x01, 0x01,
		0x03, 0x01, 0x40, 0x10, 0x01, 0x01, 0x03, 0x02, 0x38, 0x0E, 0xE1, 0x96, 0x00, 0x28, 0x03, 0x00,
		0x00, 0x00, 0x07, 0x0E, 0x01, 0x01, 0x03, 0x00, 0x44, 0x02, 0x01, 0x01, 0x03, 0x01, 0x40, 0x10,
		0x01, 0x01, 0x03, 0x02, 0x3F, 0x0E, 0x01, 0x01, 0x04, 0x03, 0x39, 0x13, 0x22, 0x6A, 0x4B, 0x4B,
		0x00, 0x33, 0x01, 0x00, 0x07, 0x0E, 0x01, 0x01, 0x03, 0x00, 0x44, 0x02, 0x01, 0x01, 0x03, 0x01,
		0x38, 0x0E, 0xB4, 0x03, 0x02, 0x31, 0x0E, 0x3C, 0xFF, 0x96, 0x01, 0x02, 0x05, 0x00, 0x00, 0x2F,
		0x00, 0x07, 0x0E, 0x01, 0x01, 0x03, 0x00, 0x44, 0x02, 0x01, 0x04, 0x05, 0x00, 0x00, 0x29, 0x00,
		0x07, 0x0E, 0x01, 0x01, 0x03, 0x00, 0x44, 0x05, 0x00, 0x1C, 0x00, 0x07, 0x0E, 0x01, 0x01, 0x03,
		0x00, 0x44, 0x06, 0x02, 0x0D, 0x4A, 0x00, 0x02, 0x09, 0x01, 0x45, 0x1C, 0x05, 0x17, 0x1F, 0x17,
		0x01, 0x17, 0x1A, 0x17, 0x1A, 0x17, 0x06, 0x02, 0x09, 0x01, 0x45, 0x1C, 0x08, 0x17, 0x00, 0x17,
		0x1C, 0x17, 0x1A, 0x17, 0x1F, 0x17, 0x01, 0x17, 0x1A, 0x17, 0x1A, 0x17, 0x07, 0x02, 0x06, 0x01,
		0x45, 0x18, 0x05, 0x02, 0x07, 0x02, 0x2F, 0x24, 0x08, 0x06, 0x3D, 0x17, 0x08, 0x02, 0x07, 0x02,
		0x2F, 0x24, 0x08, 0x06, 0x3D, 0x17, 0x22, 0x02, 0x0A, 0x01, 0x45, 0x1C, 0x01, 0x18, 0x10, 0x02,
		0x07, 0x02, 0x2F, 0x04, 0x18, 0x3D, 0x17, 0x23, 0x02, 0x09, 0x01, 0x45, 0x1C, 0x03, 0x17, 0x2B,
		0x17, 0x18, 0x17, 0x02, 0x02, 0x09, 0x01, 0x45, 0x1C, 0x02, 0x17, 0x18, 0x17, 0x02, 0x02, 0x08,
		0x01, 0x45, 0x1C, 0x03, 0x18, 0x04, 0x18, 0x03, 0x18, 0x02, 0x02, 0x09, 0x01, 0x45, 0x1C, 0x05,
		0x17, 0x03, 0x17, 0x1B, 0x17, 0x05, 0x17, 0x1A, 0x17, 0x25, 0x00, 0x02, 0x04, 0x00, 0x00, 0x02,
		0x01, 0x02, 0x00, 0x82, 0x80, 0x04, 0x9C, 0x08, 0x01, 0x82, 0x80, 0x04, 0xE4, 0x08, 0x01, 0x02,
		0x9C, 0x09, 0x01, 0x02, 0x84, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x04, 0x81, 0x08, 0x00, 0x00, 0x00,
		0x00, 0x01, 0x05, 0x81, 0x09, 0x00, 0x00, 0x03, 0x01, 0x01, 0x02, 0x02, 0x01, 0x02, 0x01, 0x02,
		0x06, 0x80, 0x80, 0x04, 0xA0, 0x0A, 0x07, 0x81, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x08, 0x80,
		0x80, 0x04, 0xBC, 0x0A, 0x01, 0x88, 0x02, 0x00, 0x01, 0x88, 0x02, 0x00, 0x01, 0x88, 0x02, 0x00,
		0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
		0x16, 0x00, 0x00, 0x00, 0x88, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
		0xE0, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00,
		0x05, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x98, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
		0x05, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,
		0xC0, 0x03, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x1C, 0x04, 0x00, 0x00,
		0x06, 0x20, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x58, 0x05, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00,
		0x0A, 0x00, 0x00, 0x00, 0xE0, 0x05, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00,
		0x36, 0x06, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x72, 0x0A, 0x00, 0x00,
		0x04, 0x20, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0xF7, 0x0A, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
		0x05, 0x00, 0x00, 0x00, 0x7A, 0x0B, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0xD0, 0x0B, 0x00, 0x00
};



void InitLib()
{
	reflibdvm = MSGetImageByName("/system/lib/libdvm.so");
	char buf[256];
#define getAddr(name,x,y) \
	name = (typeof(name))MSFindSymbol(reflibdvm, #name);\
	if(!name)\
	{\
		sprintf(buf, "_Z%zu%s%s", x, #name, y);\
		name = (typeof(name))MSFindSymbol(reflibdvm, buf);\
	}
#define getAddr2(name,x,y,z) \
	name = (typeof(name))MSFindSymbol(reflibdvm, #name);\
	if(!name)\
	{\
		sprintf(buf, "_Z%zu%s%s", x, #name, y);\
		name = (typeof(name))MSFindSymbol(reflibdvm, buf);\
		if(!name)\
			name = (typeof(name))MSFindSymbol(reflibdvm, z);\
	}
	getAddr(dexCreateClassLookup, 20, "P7DexFile");
	getAddr(dexFindClass, 12, "PK7DexFilePKc");
	getAddr(dexGetPrimitiveTypeFromDescriptorChar, 37, "c");
	getAddr(dexProtoGetParameterCount, 25, "PK8DexProto");
	getAddr(dexSwapAndVerify, 16, "Phi");
	getAddr(dvmCallMethod, 13, "P6ThreadPK6MethodP6ObjectP6JValuez");
	getAddr(dvmCheckException, 17, "P6Thread");
	getAddr(dvmDefineClass, 14, "P6DvmDexPKcP6Object");
	getAddr(dvmDexFileOpenPartial, 21, "PKviPP6DvmDex");
	getAddr(dvmDotToSlash, 13, "PKc");
	getAddr(dvmFindArrayClass, 17, "PKcP6Object");
	getAddr(dvmFindPrimitiveClass, 21, "c");
	getAddr(dvmGetBoxedReturnType, 21, "PK6Method");
	getAddr(dvmGetException, 15, "P6Thread");
	getAddr(dvmGetFieldLong, 15, "PK6Objecti");
	getAddr(dvmGetJNIEnvForThread, 21, "v");
	getAddr(dvmGetSystemClassLoader, 23, "v");
	getAddr(dvmGetVirtualizedMethod, 23, "PK11ClassObjectPK6Method");
	getAddr(dvmInvokeMethod, 15, "P6ObjectPK6MethodP11ArrayObjectS5_P11ClassObjectb");
	getAddr(dvmIsConstructorMethod, 22, "PK6Method");
	getAddr(dvmIsPrimitiveClass, 19, "PK11ClassObject");
	getAddr(dvmIsPrivateMethod, 18, "PK6Method");
	getAddr(dvmIsStaticMethod, 17, "PK6Method");
	getAddr(dvmSetException, 15, "P6ThreadP6Object");
	getAddr(dvmWriteBarrierArray, 20, "PK11ArrayObjectjj");

	getAddr2(dvmBoxPrimitive, 15, "6JValueP11ClassObject", "dvmUnboxPrimitive");
	getAddr2(dvmUnboxPrimitive, 17, "P6ObjectP11ClassObjectP6JValue", "dvmUnwrapPrimitive");

	dvmThrowClassCastException = (typeof(dvmThrowClassCastException))MSFindSymbol(reflibdvm, "dvmThrowClassCastException");
	if(!dvmThrowClassCastException)
	{
		//1.x 2.x 3.x
		dvmThrowClassCastException = (typeof(dvmThrowClassCastException))l_dvmThrowClassCastException;
		dvmThrowExceptionWithClassMessage = (typeof(dvmThrowExceptionWithClassMessage))
				MSFindSymbol(reflibdvm, "dvmThrowExceptionWithClassMessage");
	}
	if(dexGetPrimitiveTypeFromDescriptorChar)
		voidtype = dexGetPrimitiveTypeFromDescriptorChar('V');
	else
		voidtype = (PrimitiveType)8;
	MSImageRef reflibar = MSGetImageByName("/system/lib/libandroid_runtime.so");
	void* startRegAddr = MSFindSymbol(reflibar, "_ZN7android14AndroidRuntime8startRegEP7_JNIEnv");
	MSHookFunction(startRegAddr, (void*)startReg, (void**)&oldstartReg);
	void* start1Addr = MSFindSymbol(reflibar, "_ZN7android14AndroidRuntime5startEPKcb");
	MSHookFunction(start1Addr, (void*)start1, (void**)&oldstart1);
	void* start2Addr = MSFindSymbol(reflibar, "_ZN7android14AndroidRuntime5startEPKcS2_");
	MSHookFunction(start2Addr, (void*)start2, (void**)&oldstart2);
	void* startVmAddr = MSFindSymbol(reflibar, "_ZN7android14AndroidRuntime7startVmEPP7_JavaVMPP7_JNIEnv");
	MSHookFunction(startRegAddr, (void*)startVm, (void**)&oldstartVm);
}

void l_dvmThrowClassCastException(ClassObject *actual, ClassObject *desired)
{
	dvmThrowExceptionWithClassMessage("Ljava/lang/ClassCastException;", actual->descriptor);
}

int startReg(JNIEnv* env)
{
	int result = oldstartReg(env);
	if(result >= 0 && !g_hooked)
	{
		connectJavaHook(env);
	}
	return result;
}

void start1(AndroidRuntime* thiz, const char* classname, const bool startSystemServer)
{
	zygoteClsName = strdup(classname);
	oldstart1(thiz, classname, startSystemServer);
}

void start2(AndroidRuntime* thiz, const char* classname, const char* options)
{
	zygoteClsName = strdup(classname);
	oldstart1(thiz, classname, options);
}

int startVm(AndroidRuntime* thiz, JavaVM** pJavaVM, JNIEnv** pEnv)
{
	int result = oldstartVm(thiz, pJavaVM, pEnv);
	if(!result && !g_hooked)//成功
	{
		char* zygoteClsPath = dvmDotToSlash(zygoteClsName);
		MSJavaHookClassLoad(*pEnv, zygoteClsPath, zygoteInitLoad, (void*)result);
		free(zygoteClsPath);
	}
	return result;
}

void zygoteInitLoad(JNIEnv *env, jclass _class, void *data)
{
	if(!g_hooked)
	{
		jmethodID mainid = env->GetStaticMethodID(_class, "main", "([Ljava/lang/String;)V");
		MSJavaHookMethod(env, _class, mainid, (void*)zygoteMain, (void**)&oldZygoteMain);
	}
}

void zygoteMain(JNIEnv *env, jobject thiz, jobject host, jint port)
{
	if(!g_hooked)
	{
		connectJavaHook(env);
	}
	oldZygoteMain(env, thiz);
}

void connectJavaHook(JNIEnv *env)
{
	g_hooked = true;
	void* addr;
	dosafenolog(addr, mmap(0, dexdatalen, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0));
	if(addr != MAP_FAILED)
	{
		memcpy(addr, dexdata, dexdatalen);
		dexSwapAndVerify((u1*)addr, dexdatalen);
		int result = dvmDexFileOpenPartial(addr, dexdatalen, &pMSdvmDex);
		if(result)
		{
			LOGI("dvmDexFileOpenPartial() fail %d", result);
		}
		else
		{
			connectJavaHookInner(env);
		}
	}
}

jmethodID java_lang_String_toString;
jmethodID java_lang_Class_forName;
jmethodID java_lang_ClassLoader_getClassLoader;
jmethodID java_lang_String_getName;
jclass java_lang_Class;
jmethodID java_lang_String_indexOf;
jmethodID java_lang_String_substring;
jclass java_lang_reflect_Constructor;
jmethodID java_lang_reflect_Constructor_getParameterTypes;
jclass java_lang_reflect_Method;
jmethodID java_lang_reflect_Method_getParameterTypes;
jmethodID java_lang_reflect_Method_getReturnType;
jclass java_lang_reflect_InvocationTargetException;
jmethodID java_lang_reflect_InvocationTargetException_getTargetException;
jclass jClassLoadHook;
jmethodID ClassLoadHook_classLoaded;
jclass jMethodPointer;
jmethodID MethodPointer_invoke;
jfieldID MethodPointer_method;
jfieldID MethodPointer_signature;
jfieldID MethodPointer_type;
jclass jMethodHook;
jmethodID MethodHook_invoked;
jclass jSubstrateClassLoader;
jmethodID SubstrateClassLoader_init;
jmethodID SubstrateClassLoader_get;
jmethodID SubstrateClassLoader_lock;

void RegisterMSCallback(JNIEnv* env, jobject jobj);
void hookClassLoad(JNIEnv *env, jobject thiz, jstring str, jobject classLoadHook);
void hookMethod(JNIEnv *env, jobject thiz, jclass cls, jobject member, jobject methodHook, jobject methodPointer);
jobject moveUnderClassLoader(JNIEnv *env, jobject thiz, jobject classLoader, jobject t);

JNINativeMethod MS_JNI_TABLE[] =
{
	{
		"hookClassLoad",
		"(Ljava/lang/String;Lcom/saurik/substrate/_MS$ClassLoadHook;)V",
		(void*)hookClassLoad
	},
	{
		"hookMethod",
		"(Ljava/lang/Class;Ljava/lang/reflect/Member;Lcom/saurik/substrate/_MS$MethodHook;Lcom/saurik/substrate/_MS$MethodPointer;)V",
		(void*)hookMethod
	},
	{
		"moveUnderClassLoader",
		"(Ljava/lang/ClassLoader;Ljava/lang/Object;)Ljava/lang/Object;",
		(void*)moveUnderClassLoader
	},
};

bool getline(char* dst, FILE* fp)
{
	char* ret = fgets(dst, 1024, fp);
	if(!ret)
		return false;
	int len = strlen(dst);
	if(len == 0)
		return false;
	if(dst[len-1] == '\n')
	{
		dst[len-1] = '\0';
		return true;
	}
	return false;
}

void connectJavaHookInner(JNIEnv *env)
{
	pMSdvmDex->pDexFile->pClassLookup = dexCreateClassLookup(pMSdvmDex->pDexFile);
	int clssize = pMSdvmDex->pDexFile->pHeader->classDefsSize;
	if(clssize)
	{
		for(int i = 0;i < clssize;i++)
		{
			DexClassDef* curdef = (DexClassDef*)&pMSdvmDex->pDexFile->pClassDefs[i];
			curdef->accessFlags |= ACC_CONSTRUCTOR;
		}
	}

	jclass java_lang_ClassLoader = env->FindClass("java/lang/ClassLoader");
	jmethodID java_lang_ClassLoader_getSystemClassLoader = env->GetStaticMethodID(java_lang_ClassLoader, "getSystemClassLoader", "()Ljava/lang/ClassLoader;");
	jobject jSystemClassLoader = env->CallStaticObjectMethod(java_lang_ClassLoader, java_lang_ClassLoader_getSystemClassLoader);

	jclass lObject = env->FindClass("java/lang/Object");
	java_lang_String_toString = env->GetMethodID(lObject, "java_lang_String_toString", "()Ljava/lang/String;");

	jclass lClass = env->FindClass("java/lang/Class");
	java_lang_Class_forName = env->GetStaticMethodID(lClass, "forName", "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/lClass;");
	java_lang_ClassLoader_getClassLoader = env->GetMethodID(lClass, "getClassLoader", "()Ljava/lang/ClassLoader;");
	java_lang_String_getName = env->GetMethodID(lClass, "getName", "()Ljava/lang/String;");
	java_lang_Class = (jclass)env->NewGlobalRef(lClass);

	jclass String = env->FindClass("java/lang/String");
	java_lang_String_indexOf = env->GetMethodID(String, "indexOf", "(I)I");
	java_lang_String_substring = env->GetMethodID(String, "substring", "(II)Ljava/lang/String;");

	jclass lConstructor = env->FindClass("java/lang/reflect/Constructor");
	java_lang_reflect_Constructor_getParameterTypes = env->GetMethodID(lConstructor, "getParameterTypes", "()[Ljava/lang/Class;");
	java_lang_reflect_Constructor = (jclass)env->NewGlobalRef(lConstructor);

	jclass lMethod = env->FindClass("java/lang/reflect/Method");
	java_lang_reflect_Method_getParameterTypes = env->GetMethodID(lMethod, "getParameterTypes", "()[Ljava/lang/Class;");
	java_lang_reflect_Method_getReturnType = env->GetMethodID(lMethod, "getReturnType", "()[Ljava/lang/Class;");
	java_lang_reflect_Method = (jclass)env->NewGlobalRef(lMethod);

	jclass lInvocationTargetException = env->FindClass("java/lang/reflect/InvocationTargetException");
	java_lang_reflect_InvocationTargetException_getTargetException = env->GetMethodID(lMethod, "getTargetException", "()Ljava/lang/Throwable;");
	java_lang_reflect_InvocationTargetException = (jclass)env->NewGlobalRef(lInvocationTargetException);

	Object* OSystemClassLoader = MSDecodeIndirectReference(env, jSystemClassLoader);
	dvmDefineClass(pMSdvmDex, "Lcom/saurik/substrate/_MS$ClassLoadHook;", OSystemClassLoader);
	dvmDefineClass(pMSdvmDex, "Lcom/saurik/substrate/_MS$MethodHook;", OSystemClassLoader);
	dvmDefineClass(pMSdvmDex, "Lcom/saurik/substrate/_MS$MethodPointer;", OSystemClassLoader);
	dvmDefineClass(pMSdvmDex, "Lcom/saurik/substrate/SubstrateClassLoader;", OSystemClassLoader);

	jstring jstr1 = env->NewStringUTF("com.saurik.substrate._MS$ClassLoadHook");
	jclass lClassLoadHook = (jclass)env->CallStaticObjectMethod(java_lang_Class, java_lang_Class_forName, jstr1, true, OSystemClassLoader);
	env->DeleteLocalRef(jstr1);
	ClassLoadHook_classLoaded = env->GetMethodID(lClassLoadHook, "classLoaded", "(Ljava/lang/Class;)V");
	jClassLoadHook = (jclass)env->NewGlobalRef(lClassLoadHook);

	jstring jstr2 = env->NewStringUTF("com.saurik.substrate._MS$MethodPointer");
	jclass lMethodPointer = (jclass)env->CallStaticObjectMethod(java_lang_Class, java_lang_Class_forName, jstr2, true, OSystemClassLoader);
	MethodPointer_invoke = env->GetMethodID(lMethodPointer, "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
	MSJavaHookBridge((Method*)MethodPointer_invoke, invokeBridge, 0);
	MethodPointer_method = env->GetFieldID(lMethodPointer, "method", "J");
	MethodPointer_signature = env->GetFieldID(lMethodPointer, "signature", "[Ljava/lang/Class;");
	MethodPointer_type = env->GetFieldID(lMethodPointer, "type", "Ljava/lang/Class;");
	jMethodPointer = (jclass)env->NewGlobalRef(lMethodPointer);

	jstring jstr3 = env->NewStringUTF("com.saurik.substrate._MS$MethodHook");
	jclass lMethodHook = (jclass)env->CallStaticObjectMethod(java_lang_Class, java_lang_Class_forName, jstr3, true, OSystemClassLoader);
	MethodHook_invoked = env->GetMethodID(lMethodHook, "invoked", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
	jMethodHook = (jclass)env->NewGlobalRef(lMethodHook);

	jstring jstr4 = env->NewStringUTF("com.saurik.substrate.SubstrateClassLoader");
	jclass lSubstrateClassLoader = (jclass)env->CallStaticObjectMethod(java_lang_Class, java_lang_Class_forName, jstr4, true, OSystemClassLoader);
	MethodHook_invoked = env->GetMethodID(lSubstrateClassLoader, "invoked", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
	SubstrateClassLoader_init = env->GetMethodID(lSubstrateClassLoader, "<init>", "(Ljava/lang/String;Ljava/lang/ClassLoader;)V");
	SubstrateClassLoader_get = env->GetMethodID(lSubstrateClassLoader, "get", "(Ljava/lang/ClassLoader;)Ljava/lang/ClassLoader;");
	SubstrateClassLoader_lock = env->GetMethodID(lSubstrateClassLoader, "lock", "()Ljava/lang/Object;");
	jSubstrateClassLoader =(jclass) env->NewGlobalRef(lSubstrateClassLoader);

	FILE* fp = fopen("/data/data/com.saurik.substrate/permitted.list", "r");
	if(fp)
	{
		char buf[1024];
		char* inner_ptr = NULL;
		if(getline(buf, fp) && !strcmp(buf, "0"))
		{
			while(getline(buf, fp))
			{
				strtok_r(buf, " ", &inner_ptr);//跳过packagename
				char* apkpath = strtok_r(0, " ", &inner_ptr);
				char* mainclass = strtok_r(0, " ", &inner_ptr);
				if(apkpath && mainclass)
				{
					int status;
					dosafe(status, access(apkpath, R_OK));
					if(status == 0)//all permission granted
					{
						Log::log("MS:Notice: Loading: %s", apkpath);
						jstring tmp1 = env->NewStringUTF(apkpath);
						jobject SubstrateClassLoader = env->NewObject(jSubstrateClassLoader, SubstrateClassLoader_init, tmp1, OSystemClassLoader);
						env->DeleteLocalRef(tmp1);
						RegisterMSCallback(env,  SubstrateClassLoader);
						MSJavaBlessClassLoader(env, SubstrateClassLoader);
						jstring tmp2 = env->NewStringUTF(mainclass);
						jclass loadClass = (jclass)env->CallStaticObjectMethod(java_lang_Class, java_lang_Class_forName, tmp2, true, SubstrateClassLoader);
						env->DeleteLocalRef(tmp2);
						if(env->ExceptionCheck())
						{
							env->ExceptionDescribe();
							env->ExceptionClear();
						}
						else if(loadClass)
						{
							jmethodID loadClass_initialize= env->GetStaticMethodID(loadClass, "initialize", "()V");
							if(env->ExceptionCheck())
							{
								env->ExceptionDescribe();
								env->ExceptionClear();
							}
							else if(loadClass_initialize != 0)
							{
								env->CallStaticVoidMethod(loadClass, loadClass_initialize);
								if(env->ExceptionCheck())
								{
									env->ExceptionDescribe();
									env->ExceptionClear();
								}
							}
						}
					}
				}
			}
		}
		fclose(fp);
	}
}

void RegisterMSCallback(JNIEnv* env, jobject jobj)
{
	Object* Obj = MSDecodeIndirectReference(env, jobj);
	dvmDefineClass(pMSdvmDex, "Lcom/saurik/substrate/_MS;", Obj);
	jstring tmp = env->NewStringUTF("com.saurik.substrate._MS");
	jclass com_saurik_substrate__MS = (jclass)env->CallStaticObjectMethod(java_lang_Class, java_lang_Class_forName, tmp, true, jobj);
	env->DeleteLocalRef(tmp);
	env->RegisterNatives(com_saurik_substrate__MS, MS_JNI_TABLE, arraysize(MS_JNI_TABLE));
}

void invokeBridge(const u4* args, JValue* pResult, const Method* method, struct Thread* self)
{
	invoke_data* data = (invoke_data*)args;
	Method* tmethod = *(Method**)(data->baseAddr + ((InstField*)MethodPointer_method)->byteOffset);
	ArrayObject* params = *(ArrayObject**)(data->baseAddr + ((InstField*)MethodPointer_signature)->byteOffset);
	ClassObject* returnType = *(ClassObject**)(data->baseAddr + ((InstField*)MethodPointer_type)->byteOffset);
	pResult->l = dvmInvokeMethod(data->obj, tmethod, data->argList, params, returnType, true);
	Object* excobj1 = dvmGetException(self);
	if(excobj1)
	{
		JNIEnv* env = (JNIEnv*)dvmGetJNIEnvForThread();
		Object* excobj2 = MSDecodeIndirectReference(env, java_lang_reflect_InvocationTargetException);
		if(dvmInstanceofNonTrivial(excobj1->clazz, (ClassObject*)excobj2))
		{
			JValue result;
			dvmCallMethod(self, (const Method*)java_lang_reflect_InvocationTargetException_getTargetException, excobj1, &result);
			dvmSetException(self, result.l);
		}
	}
}


void objClassOnLoad(JNIEnv *env, jclass _class, void *data)
{
	env->CallVoidMethod((jobject)data, ClassLoadHook_classLoaded, _class);
}

void hookClassLoad(JNIEnv *env, jobject thiz, jstring str, jobject classLoadHook)
{
	const char* clsname = env->GetStringUTFChars(str, 0);
	char* clspath = dvmDotToSlash(clsname);
	env->ReleaseStringUTFChars(str, clsname);
	MSJavaHookClassLoad(env, clspath, objClassOnLoad, env->NewGlobalRef(classLoadHook));
	free(clspath);
}

void* DalvikMethodCallback(void** stack, unsigned int* data)
{
	/*
		stack：					data：
		const u4* args			hookmethod
		JValue* pResult			invokedmethod
		const Method* method
		struct Thread* self
	 */
	Thread* self = (Thread*)stack[3];
	Method* realmethod = (Method*)stack[2];
	JValue* pResult = (JValue*)stack[1];
	//hookMethod(Class cls, Member member, MethodHook methodHook, MethodPointer methodPointer)
	const u4* args = (const u4*)stack[0];
	JNIEnv* env = (JNIEnv*)dvmGetJNIEnvForThread();
	Object* hookmethod = MSDecodeIndirectReference(env, (jobject)data[0]);
	jclass invoke_cls = 0;
	if(!dvmIsStaticMethod(realmethod))
	{//非静态函数第一个参数为类对象地址
		invoke_cls = (jclass)args[0];
		args++;
	}
	ClassObject* arrayClass = dvmFindArrayClass("[Ljava/lang/Object;", 0);
	size_t length = dexProtoGetParameterCount(&realmethod->prototype);
	//构造invoke(Object obj, Object... objArr)
	ArrayObject* invoke_args = dvmAllocArrayByClass(arrayClass, length, 0);//new Object[]{...}
	if(invoke_args)
	{
		const char* shorty = &realmethod->shorty[1]; // [0] is the return type.
		int i = 0, j = 1, k = 0;
		while(*shorty)
		{
			JValue val = {0};
			DataObject* dao = 0;
			bool flag = true;
			switch(*shorty)
			{
				case 'B'://Byte
				case 'C'://Char
				case 'F'://Float
				case 'I'://Int
				case 'S'://Short
				case 'Z'://Boolean
					val.i = args[i++];
					dao = dvmBoxPrimitive(val, dvmFindPrimitiveClass(*shorty));
					dvmReleaseTrackedAlloc(dao, 0);
					flag = true;
					break;
				case 'L'://Object
				case '['://???
					dao = (DataObject*)args[i++];
					flag = true;
					break;
				case 'D'://Double
				case 'J'://Long
					val.j = *(s8*)(args + i);
					i += 2;
					dao = dvmBoxPrimitive(val, dvmFindPrimitiveClass(*shorty));
					dvmReleaseTrackedAlloc(dao, 0);
					flag = true;
					break;
				default://v
					break;
			}
			if(flag)
			{
				*(DataObject**)invoke_args[k].contents = dao;
				if(dao)
					dvmWriteBarrierArray(invoke_args, k, j);
			}
			shorty++;
			k++;
			j++;
		}
	}
	JValue invoke_result;
	dvmCallMethod(self, (Method*)data[1], hookmethod, &invoke_result, invoke_cls, invoke_args);
	if(!dvmCheckException(self))
	{
		ClassObject* returnType = dvmGetBoxedReturnType(realmethod);
		if(returnType->primitiveType != voidtype)
		{
			if(invoke_result.i)
			{
				if(!dvmUnboxPrimitive(invoke_result.l, returnType, pResult))
					dvmThrowClassCastException(*(ClassObject**)invoke_result.i,returnType);
			}
			else
			{
				if(dvmIsPrimitiveClass(returnType))
					dvmThrowClassCastException(returnType, returnType);
				pResult->i = 0;
			}
		}
	}
	dvmReleaseTrackedAlloc(invoke_args, self);
}

void hookMethod(JNIEnv *env, jobject thiz, jclass cls, jobject member, jobject methodHook, jobject methodPointer)
{
	if(!member)
		return;
	Method* membermethod = (Method*)env->FromReflectedMethod(member);
	ClassObject* clsobj = (ClassObject*)MSDecodeIndirectReference(env, cls);
	if(!dvmIsPrivateMethod(membermethod) && !dvmIsStaticMethod(membermethod) && !dvmIsConstructorMethod(membermethod))
	{
		membermethod = (Method*)dvmGetVirtualizedMethod(clsobj, (const Method*)membermethod);
	}
	if(membermethod->clazz != clsobj)
	{
		LOGI("MS:Error: hook below definition [%s : %s | %s \\ %s]",
				membermethod->name, membermethod->shorty, membermethod->clazz->descriptor, clsobj->descriptor);
		return;
	}

	jobject returntype;
	jobject paramtype;
	if(env->IsInstanceOf(member, java_lang_reflect_Constructor))
	{
		returntype = 0;
		paramtype = env->CallObjectMethod(member, java_lang_reflect_Constructor_getParameterTypes);
	}
	else if(env->IsInstanceOf(member, java_lang_reflect_Method))
	{
		returntype = env->CallObjectMethod(member, java_lang_reflect_Method_getReturnType);
		paramtype = env->CallObjectMethod(member, java_lang_reflect_Method_getParameterTypes);
	}
	else
	{
		return;
	}
	ClassObject* hookclass = (ClassObject*)MSDecodeIndirectReference(env, env->GetObjectClass(methodHook));
	const Method* invokemethod = dvmGetVirtualizedMethod(hookclass, (const Method*)MethodHook_invoked);
	unsigned int* data = new unsigned int[2];
	data[0] = (unsigned int)env->NewGlobalRef(methodHook);
	data[1] = (unsigned int)invokemethod;
	void* outfunc = MSCloseFunction((void*)DalvikMethodCallback, data);
	Method* backup;
	MSJavaHookBridge(membermethod, (DalvikBridgeFunc)outfunc, &backup);
	if(methodPointer)
	{
		env->SetLongField(methodPointer, MethodPointer_method, (jlong)backup);
		env->SetObjectField(methodPointer, MethodPointer_signature, paramtype);
		env->SetObjectField(methodPointer, MethodPointer_type, returntype);
	}
}

jobject moveUnderClassLoader(JNIEnv *env, jobject thiz, jobject classLoader, jobject t)
{
	jclass objcls = env->GetObjectClass(t);
	jobject clsLoader = env->CallObjectMethod(objcls, java_lang_ClassLoader_getClassLoader);
	if(env->IsInstanceOf(clsLoader, jSubstrateClassLoader))
	{
		jobject lock = env->CallObjectMethod(clsLoader, SubstrateClassLoader_lock);
		env->MonitorEnter(lock);//synchronized(lock)
		jobject single = env->CallObjectMethod(clsLoader, SubstrateClassLoader_get, classLoader);//单例
		RegisterMSCallback(env, single);
		MSJavaBlessClassLoader(env, single);
		env->MonitorExit(lock);
		if(!env->IsSameObject(single, clsLoader))
		{
			jobject clsname = env->CallObjectMethod(objcls, java_lang_String_getName);
			jobject newinstance = env->CallStaticObjectMethod(java_lang_Class, java_lang_Class_forName, clsname, true, single);
			ClassObject* objref = (ClassObject*)MSDecodeIndirectReference(env, t);
			objref->clazz = (ClassObject*)MSDecodeIndirectReference(env, newinstance);
		}
	}
	return t;
}
